//animations
function Battle( dispatcher, gameID ) {
  this.dispatcher = dispatcher;
  this.initialize( gameID );
}

Battle.prototype = {

  initialize: function( gameID ) {
    var instance = this;

    this.elements = {
      battle: $( '#battle' ),       // Battle view
      attackBtn: $( '.attack' ),    // Attack buttons
      bgAudio: $( '#audio-battle' ) // Background audio
    };

    // Show the battle view
    this.show();

    // Subscribe to a private game channel
    this.channel = this.dispatcher.subscribe_private( gameID );

    // Play the battle music when the game starts
    this.channel.bind( 'start_game', function( data ) {
      instance.playSound( 'battle' );
    });

    // Bind attack buttons to send attack messages
    this.elements.attackBtn.on( 'click', function() {
      var gameName = instance.channel.name;
      var attackType = $( this ).data( 'attack-type' );

      instance.dispatcher.trigger( 'game.attack', {
        game: gameName,
        attack_type: attackType
      });
    });

    // Listen for damage_dealt event & send message to server to update Pokemon's health
    this.channel.bind( 'damage_dealt', function( data ) {
      var connectionID = instance.dispatcher._conn.connection_id;

      if ( data.opponent === connectionID ) {
        var attackData = {
          game: instance.channel.name,
          damage: data.damage,
          attack_type: data.attack_type
        };
        instance.dispatcher.trigger( 'game.receive_damage', attackData );
      }
    });

    // Listen for update view event & update pokemon's health in view
    this.channel.bind( 'update_game', function( data ) {
      var connectionID = instance.dispatcher._conn.connection_id;
      var targetIsSelf = data.player === connectionID;

      instance.updateView({
        targetIsSelf: targetIsSelf,
        health: data.health,
        maxHealth: data.max_health,
        attackType: data.attack_type
      });
    });


    // Check if I lost or the other person lost
    // Faint the appropriate pokemon
    this.channel.bind( 'end_game', function( loser ) {


      var connectionID = instance.dispatcher._conn.connection_id;
      var targetIsSelf = loser === connectionID;

      // Notify if they have won or lost the game.
      if ( targetIsSelf ) {
        alert('You lost!');
      } else {
        alert('You won!');
      }
    });
  },

  // Hide the battle view
  // Stops the background audio
  destroy: function() {
    var gameID = this.channel.name;
    this.dispatcher.unsubscribe( gameID );

    $( this.elements.battle ).hide();

    var audio = $( this.elements.bgAudio )[0];
    audio.pause();
    audio.currentTime = 0;
  },

  // Show the battle view
  show: function() {
    $( this.elements.battle ).show();
  },

  updateView: function( data ) {
    this.battleData = data;

    var instance = this;

    if ( data.targetIsSelf ) {
      var $attackingPokemon = $( '#their-pokemon-avatar' );
      var $targetPokemon = $( '#my-pokemon-avatar' );
    } else {
      var $attackingPokemon = $( '#my-pokemon-avatar' );
      var $targetPokemon = $( '#their-pokemon-avatar' );
    }

    // Plays the appropriate sound for the appropriate attack type
    this.playSound( data.attackType );

    // Update the health bar
    this.updateHealthBar();

    // Animate the pokemon for the appropriate attack type
    this.animateAttack.call( $attackingPokemon, data.attackType );
    this.animateAttack.call( $targetPokemon, 'receive-damage' );

    // After the attack animation has finished...
    // If pokemon has fainted, do faint stuff
    if ( data.health === 0 ) {
      $targetPokemon.one( 'webkitAnimationEnd mozAnimationEnd', function() {
        instance.pokemonFaints();
      });
    }
  },
  pokemonFaints: function() {
    var prefix = this.battleData.targetIsSelf ? 'my-pokemon' : 'their-pokemon';

    var $pokemon = $( '#' + prefix + '-avatar' );
    var faintAnimation = prefix + '-faint';

    $pokemon.addClass( faintAnimation );
    this.playSound( 'faint' );
  },
  updateHealthBar: function(){
    var updateTarget = this.battleData.targetIsSelf ? '.my-healthbar' : '.their-healthbar';
    $( updateTarget ).val( this.battleData.health / this.battleData.maxHealth * 100 );
  },
  animateAttack: function( animationType ) {
    // Add animation class to Pokemon
    var $pokemon = $( this );
    $pokemon.addClass( animationType );

    // After animation is over, reset the pokemon's state
    $pokemon.one('webkitAnimationEnd mozAnimationEnd', function() {
      $( this ).removeClass( animationType );
    });
  },

  // Finds the appropriate audio tag and plays it
  playSound: function( id ) {
    document.getElementById( 'audio-' + id ).play();
  }
};
