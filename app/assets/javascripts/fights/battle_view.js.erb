//animations
function BattleView() {}

BattleView.prototype = {
  updateView: function( data ) {
    // targetIsSelf: The target of the attack is the client (true) or the client's opponent (false)
    // attackType: The attack should be animated (e.g. tackle, counter)
    this.animateAttack({ targetIsSelf: data.targetIsSelf, attackType: data.attackType })

    this.updateHealthBar( data );
  },
  pokemonFaints: function( targetIsSelf ) {
    var prefix = targetIsSelf ? 'my-pokemon' : 'their-pokemon';

    var $pokemon = $( '#' + prefix + '-avatar' );
    var faintAnimation = prefix + '-faint';

    $pokemon.addClass( faintAnimation );
    this.playSound( 'faint' );
  },
  updateHealthBar: function( attributes ){
    var updateTarget = attributes.targetIsSelf ? '.my-healthbar' : '.their-healthbar';
    $( updateTarget ).val( attributes.health / attributes.maxHealth * 100 );
  },
  animateAttack: function( attributes ){
    if ( attributes.targetIsSelf ) {
      var $attackingPokemon = $( '#their-pokemon-avatar' );
      var $targetPokemon = $( '#my-pokemon-avatar' );
    } else {
      var $attackingPokemon = $( '#my-pokemon-avatar' );
      var $targetPokemon = $( '#their-pokemon-avatar' );
    }

    // Plays the appropriate sound for the appropriate attackType
    this.playSound( attributes.attackType );

    // Animate the pokemon for the appropriate attackType
    this.animateOnce.call( $attackingPokemon, attributes.attackType );
    this.animateOnce.call( $targetPokemon, 'receive-damage' );
  },
  animateOnce: function( animationType ) {
    // Add animation class to Pokemon
    var $pokemon = $( this );
    $pokemon.addClass( animationType );

    // After animation is over, reset the pokemon's state
    $pokemon.one('webkitAnimationEnd mozAnimationEnd', function() {
      $( this ).removeClass( animationType );
    });
  },
  playSound: function( id ) {
    // Finds the appropriate audio tag and plays it
    document.getElementById( 'audio-' + id ).play();
  }
};
